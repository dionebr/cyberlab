#!/bin/bash

# üöÄ CyberLab Professional - Script de Inicializa√ß√£o R√°pida
# Vers√£o: 2.0
# Uso: ./start.sh [op√ß√µes]

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Banner
print_banner() {
    echo -e "${PURPLE}"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó "
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó"
    echo "‚ñà‚ñà‚ïë      ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù"
    echo "‚ñà‚ñà‚ïë       ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó"
    echo "‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù"
    echo " ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù "
    echo -e "${WHITE}CyberLab Professional v2.0 - Break'n'Learn Platform${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  AMBIENTE EDUCACIONAL VULNER√ÅVEL - USE APENAS EM LABORAT√ìRIO ‚ö†Ô∏è${NC}"
    echo ""
}

# Verificar depend√™ncias
check_dependencies() {
    echo -e "${CYAN}üîç Verificando depend√™ncias...${NC}"
    
    # Verificar Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker n√£o encontrado. Instale o Docker primeiro.${NC}"
        echo -e "${WHITE}Ubuntu/Debian: curl -fsSL https://get.docker.com | sh${NC}"
        exit 1
    fi
    
    # Verificar Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose n√£o encontrado.${NC}"
        echo -e "${WHITE}Instale: sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose${NC}"
        exit 1
    fi
    
    # Verificar se Docker est√° rodando
    if ! docker info &> /dev/null; then
        echo -e "${RED}‚ùå Docker n√£o est√° rodando. Inicie o Docker primeiro.${NC}"
        echo -e "${WHITE}sudo systemctl start docker${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Depend√™ncias OK${NC}"
}

# Verificar portas
check_ports() {
    echo -e "${CYAN}üîç Verificando portas dispon√≠veis...${NC}"
    
    PORTS=(5001 8080 3306 8081 8082 6379)
    for port in "${PORTS[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
            echo -e "${YELLOW}‚ö†Ô∏è  Porta $port em uso. Pode haver conflitos.${NC}"
        fi
    done
    
    echo -e "${GREEN}‚úÖ Verifica√ß√£o de portas conclu√≠da${NC}"
}

# Inicializar aplica√ß√£o
start_application() {
    echo -e "${CYAN}üöÄ Iniciando CyberLab Professional...${NC}"
    
    # Parar containers existentes
    echo -e "${YELLOW}üõë Parando containers existentes...${NC}"
    docker-compose down 2>/dev/null || true
    
    # Construir e iniciar servi√ßos
    echo -e "${CYAN}üèóÔ∏è  Construindo e iniciando servi√ßos...${NC}"
    docker-compose up -d --build
    
    # Aguardar inicializa√ß√£o
    echo -e "${CYAN}‚è≥ Aguardando inicializa√ß√£o dos servi√ßos...${NC}"
    
    # Fun√ß√£o para verificar sa√∫de de um servi√ßo
    wait_for_service() {
        local url=$1
        local name=$2
        local max_attempts=30
        local attempt=1
        
        while [ $attempt -le $max_attempts ]; do
            if curl -s "$url" > /dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ $name est√° rodando${NC}"
                return 0
            fi
            echo -e "${YELLOW}‚è≥ Aguardando $name... (tentativa $attempt/$max_attempts)${NC}"
            sleep 2
            ((attempt++))
        done
        
        echo -e "${RED}‚ùå $name n√£o conseguiu iniciar ap√≥s $max_attempts tentativas${NC}"
        return 1
    }
    
    # Verificar servi√ßos
    wait_for_service "http://localhost:3001/health" "Backend"
    wait_for_service "http://localhost:8080" "Frontend"
    wait_for_service "http://localhost:8081" "phpMyAdmin"
}

# Mostrar status
show_status() {
    echo ""
    echo -e "${WHITE}üéØ CyberLab Professional est√° rodando!${NC}"
    echo ""
    echo -e "${BLUE}üì± INTERFACES DISPON√çVEIS:${NC}"
    echo -e "${WHITE}üåê Frontend:       ${CYAN}http://localhost:8080${NC}"
    echo -e "${WHITE}‚ö° Backend API:    ${CYAN}http://localhost:3001${NC}"
    echo -e "${WHITE}üóÉÔ∏è  phpMyAdmin:    ${CYAN}http://localhost:8081${NC}"
    echo -e "${WHITE}üíæ Redis Commander: ${CYAN}http://localhost:8082${NC}"
    echo ""
    echo -e "${BLUE}üîó ENDPOINTS √öTEIS:${NC}"
    echo -e "${WHITE}üìä Analytics:      ${CYAN}http://localhost:3001/api/analytics/dashboard${NC}"
    echo -e "${WHITE}ü©∫ Status API:     ${CYAN}http://localhost:3001/health${NC}"
    echo -e "${WHITE}üìã Docs API:       ${CYAN}http://localhost:5001/api${NC}"
    echo ""
    echo -e "${BLUE}üéØ M√ìDULOS VULNER√ÅVEIS:${NC}"
    echo -e "${WHITE}‚Ä¢ SQL Injection    ‚Ä¢ XSS              ‚Ä¢ Command Injection${NC}"
    echo -e "${WHITE}‚Ä¢ File Upload      ‚Ä¢ Auth Bypass      ‚Ä¢ Brute Force${NC}" 
    echo -e "${WHITE}‚Ä¢ CSRF            ‚Ä¢ File Inclusion   ‚Ä¢ Session Mgmt${NC}"
    echo -e "${WHITE}‚Ä¢ Blind SQL       ‚Ä¢ Insecure Captcha ‚Ä¢ Analytics${NC}"
    echo ""
}

# Mostrar logs
show_logs() {
    echo -e "${CYAN}üìã Logs dos servi√ßos (Ctrl+C para sair):${NC}"
    docker-compose logs -f
}

# Parar aplica√ß√£o
stop_application() {
    echo -e "${YELLOW}üõë Parando CyberLab Professional...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ Aplica√ß√£o parada com sucesso${NC}"
}

# Reset completo
reset_application() {
    echo -e "${RED}üóëÔ∏è  RESET COMPLETO - Isso ir√° remover todos os dados!${NC}"
    read -p "Tem certeza? Digite 'RESET' para confirmar: " confirm
    
    if [ "$confirm" = "RESET" ]; then
        echo -e "${YELLOW}üõë Parando servi√ßos...${NC}"
        docker-compose down -v
        
        echo -e "${YELLOW}üóëÔ∏è  Removendo imagens...${NC}"
        docker-compose rm -f
        docker system prune -f
        
        echo -e "${YELLOW}üßπ Limpando volumes...${NC}"
        docker volume prune -f
        
        echo -e "${GREEN}‚úÖ Reset completo realizado${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  Reset cancelado${NC}"
    fi
}

# Mostrar uso
show_usage() {
    echo -e "${WHITE}Uso: $0 [comando]${NC}"
    echo ""
    echo -e "${BLUE}Comandos dispon√≠veis:${NC}"
    echo -e "${WHITE}  start     ${NC}Iniciar a aplica√ß√£o (padr√£o)"
    echo -e "${WHITE}  stop      ${NC}Parar a aplica√ß√£o"
    echo -e "${WHITE}  restart   ${NC}Reiniciar a aplica√ß√£o"  
    echo -e "${WHITE}  logs      ${NC}Mostrar logs em tempo real"
    echo -e "${WHITE}  status    ${NC}Mostrar status dos servi√ßos"
    echo -e "${WHITE}  reset     ${NC}Reset completo (remove todos os dados)"
    echo -e "${WHITE}  help      ${NC}Mostrar esta ajuda"
    echo ""
    echo -e "${BLUE}Exemplos:${NC}"
    echo -e "${WHITE}  $0 start   ${NC}# Inicia a aplica√ß√£o"
    echo -e "${WHITE}  $0 logs    ${NC}# Mostra logs em tempo real"
    echo -e "${WHITE}  $0 reset   ${NC}# Reset completo"
    echo ""
}

# Menu principal
main() {
    print_banner
    
    case ${1:-start} in
        start)
            check_dependencies
            check_ports
            start_application
            show_status
            ;;
        stop)
            stop_application
            ;;
        restart)
            stop_application
            sleep 2
            start_application
            show_status
            ;;
        logs)
            show_logs
            ;;
        status)
            show_status
            ;;
        reset)
            reset_application
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            echo -e "${RED}‚ùå Comando inv√°lido: $1${NC}"
            show_usage
            exit 1
            ;;
    esac
}

# Verificar se est√° rodando como root (n√£o recomendado)
if [ "$EUID" -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Rodando como root. Considere criar um usu√°rio n√£o-root para Docker.${NC}"
    sleep 2
fi

# Executar fun√ß√£o principal
main "$@"